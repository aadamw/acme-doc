{"version":3,"sources":["../src/index.ts","../src/docs.ts","../src/utils/logger.ts","../src/utils/get-package-info.ts"],"sourcesContent":["import { Command } from \"commander\";\n\nimport { docs } from \"./docs\";\nimport { getPackageInfo } from \"@/utils/get-package-info\";\n\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\nasync function main() {\n  const packageInfo = getPackageInfo();\n\n  const program = new Command()\n    .name(\"0xaddm\")\n    .description(\"add production ready templates to your project\")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    );\n\n  program.addCommand(docs);\n\n  program.parse();\n}\n\nmain();\n","import { existsSync, promises as fs } from \"fs\";\nimport path from \"path\";\nimport { Command } from \"commander\";\nimport { logger } from \"@/utils/logger\";\nimport * as z from \"zod\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport prompts from \"prompts\";\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n});\n\nasync function promptForConfig() {\n  const highlight = (text: string) => chalk.cyan(text);\n\n  const options = await prompts([\n    {\n      type: \"text\",\n      name: \"appName\",\n      message: `What is the name of your ${highlight(\"app name\")}?`,\n      initial: \"docs\",\n    },\n  ]);\n\n  return {\n    appName: options.appName,\n  };\n}\n\nexport const docs = new Command()\n  .name(\"docs\")\n  .description(\"initialize docs project\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse(opts);\n      const cwd = path.resolve(options.cwd);\n      const config = await promptForConfig();\n\n      const pathWithAppName = `${cwd}/${config.appName}`;\n\n      // Ensure target directory doesn't exists.\n      if (existsSync(pathWithAppName)) {\n        logger.error(`The path ${cwd} already exist. Please try again.`);\n        process.exit(1);\n      }\n\n      await fs.mkdir(pathWithAppName, { recursive: true });\n      await runInit(cwd);\n\n      logger.info(\"\");\n      logger.info(\n        `${chalk.green(\"Success!\")} Project initialization completed.`\n      );\n      logger.info(\"\");\n    } catch (error) {\n      // handleError(error)\n    }\n  });\n\nasync function runInit(cwd: string) {\n  const spinner = ora(`Initializing project...`)?.start();\n}\n","import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n  break() {\n    console.log(\"\");\n  },\n};\n","import path from \"path\";\nimport fs from \"fs-extra\";\nimport { type PackageJson } from \"type-fest\";\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\");\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson;\n}\n"],"mappings":";AAAA,SAAS,WAAAA,gBAAe;;;ACAxB,SAAS,YAAY,YAAY,UAAU;AAC3C,OAAO,UAAU;AACjB,SAAS,eAAe;;;ACFxB,OAAO,WAAW;AAEX,IAAM,SAAS;AAAA,EACpB,SAAS,MAAiB;AACxB,YAAQ,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,EAChC;AAAA,EACA,QAAQ,MAAiB;AACvB,YAAQ,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC;AAAA,EACnC;AAAA,EACA,QAAQ,MAAiB;AACvB,YAAQ,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC;AAAA,EACjC;AAAA,EACA,WAAW,MAAiB;AAC1B,YAAQ,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,QAAQ;AACN,YAAQ,IAAI,EAAE;AAAA,EAChB;AACF;;;ADdA,YAAY,OAAO;AACnB,OAAOC,YAAW;AAClB,OAAO,SAAS;AAChB,OAAO,aAAa;AAEpB,IAAM,oBAAsB,SAAO;AAAA,EACjC,KAAO,SAAO;AAAA,EACd,KAAO,UAAQ;AACjB,CAAC;AAED,eAAe,kBAAkB;AAC/B,QAAM,YAAY,CAAC,SAAiBA,OAAM,KAAK,IAAI;AAEnD,QAAM,UAAU,MAAM,QAAQ;AAAA,IAC5B;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS,4BAA4B,UAAU,UAAU;AAAA,MACzD,SAAS;AAAA,IACX;AAAA,EACF,CAAC;AAED,SAAO;AAAA,IACL,SAAS,QAAQ;AAAA,EACnB;AACF;AAEO,IAAM,OAAO,IAAI,QAAQ,EAC7B,KAAK,MAAM,EACX,YAAY,yBAAyB,EACrC,OAAO,aAAa,6BAA6B,KAAK,EACtD;AAAA,EACC;AAAA,EACA;AAAA,EACA,QAAQ,IAAI;AACd,EACC,OAAO,OAAO,SAAS;AACtB,MAAI;AACF,UAAM,UAAU,kBAAkB,MAAM,IAAI;AAC5C,UAAM,MAAM,KAAK,QAAQ,QAAQ,GAAG;AACpC,UAAM,SAAS,MAAM,gBAAgB;AAErC,UAAM,kBAAkB,GAAG,OAAO,OAAO;AAGzC,QAAI,WAAW,eAAe,GAAG;AAC/B,aAAO,MAAM,YAAY,sCAAsC;AAC/D,cAAQ,KAAK,CAAC;AAAA,IAChB;AAEA,UAAM,GAAG,MAAM,iBAAiB,EAAE,WAAW,KAAK,CAAC;AACnD,UAAM,QAAQ,GAAG;AAEjB,WAAO,KAAK,EAAE;AACd,WAAO;AAAA,MACL,GAAGA,OAAM,MAAM,UAAU;AAAA,IAC3B;AACA,WAAO,KAAK,EAAE;AAAA,EAChB,SAAS,OAAP;AAAA,EAEF;AACF,CAAC;AAEH,eAAe,QAAQ,KAAa;AAClC,QAAM,UAAU,IAAI,yBAAyB,GAAG,MAAM;AACxD;;;AErEA,OAAOC,WAAU;AACjB,OAAOC,SAAQ;AAGR,SAAS,iBAAiB;AAC/B,QAAM,kBAAkBD,MAAK,KAAK,cAAc;AAEhD,SAAOC,IAAG,aAAa,eAAe;AACxC;;;AHHA,QAAQ,GAAG,UAAU,MAAM,QAAQ,KAAK,CAAC,CAAC;AAC1C,QAAQ,GAAG,WAAW,MAAM,QAAQ,KAAK,CAAC,CAAC;AAE3C,eAAe,OAAO;AACpB,QAAM,cAAc,eAAe;AAEnC,QAAM,UAAU,IAAIC,SAAQ,EACzB,KAAK,QAAQ,EACb,YAAY,gDAAgD,EAC5D;AAAA,IACC,YAAY,WAAW;AAAA,IACvB;AAAA,IACA;AAAA,EACF;AAEF,UAAQ,WAAW,IAAI;AAEvB,UAAQ,MAAM;AAChB;AAEA,KAAK;","names":["Command","chalk","path","fs","Command"]}